pushRootCtx

    'types'
    load
    'stringops'
    load
    'arrays'
    load

    'getClass'
    'java.lang.Object'
    findClass
    0
    findMethod
    'getClass'
    define

    // ezMethod
    beginFunc
        '\('
        'split'
        eval
        call

        copy
        1
        get
        copy
        int
        dec
        0
        swp
        'substring'
        eval
        call
        swp
        0
        get

        '\.'
        'split'
        eval
        call
        copy
        copy
        int
        dec
        get

        swp

        dec
        copy
        int
        'arrLen'
        define

        ''
        'class'
        define
        beginFunc
            copy
            'i'
            eval
            get
            'class'
            var
            swp
            add
            'class'
            var
            '.'
            add
        endFunc
        beginFunc
            0
            'i'
            define
        endFunc
        beginFunc
            'i'
            eval
            'arrLen'
            eval
            lt
        endFunc
        beginFunc
            'i'
            var
            inc
        endFunc
        for
        pop
        'class'
        eval
        copy
        int
        dec
        0
        swp
        'substring'
        eval
        call
        findClass

        // Method name is already next on the stack

        2
        pull

        // get method types

        ', *'
        'split'
        eval
        call

        copy
        int
        'arrlen'
        define

        beginFunc
            copy
            'i'
            eval
            get

            copy
            beginFunc
                copy
                beginFunc
                    pop
                    'Boolean_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'boolean'
                eq
                swp
                'boolean['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Byte_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'byte'
                eq
                swp
                'byte['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Char_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'char'
                eq
                swp
                'char['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Double_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'double'
                eq
                swp
                'double['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Float_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'float'
                eq
                swp
                'float['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Integer_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'int'
                eq
                swp
                'int['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Long_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'long'
                eq
                swp
                'long['
                'startsWith'
                eval
                call
                or
                if

                copy
                beginFunc
                    pop
                    'Short_TYPE'
                    eval
                    return
                endFunc
                swp
                copy
                'short'
                eq
                swp
                'short['
                'startsWith'
                eval
                call
                or
                if

                beginFunc
                    copy
                    int
                    2
                    sub
                    0
                    swp
                    'substring'
                    eval
                    call
                endFunc
                beginFunc
                    copy
                    '[]'
                    'endsWith'
                    eval
                    call
                endFunc
                while
                findClass
            endFunc
            call

            swp

            beginFunc
                swp
                'arrayType'
                eval
                call
                swp
                copy
                int
                2
                sub
                0
                swp
                'substring'
                eval
                call
            endFunc
            beginFunc
                copy
                '[]'
                'endsWith'
                eval
                call
            endFunc
            while
            pop

            swp
            'arr'
            define
            'arr'
            eval
            swp
            'i'
            eval
            put
            'arr'
            eval
        endFunc
        beginFunc
            0
            'i'
            define
        endFunc
        beginFunc
            'i'
            eval
            'arrlen'
            eval
            lt
        endFunc
        beginFunc
            'i'
            var
            inc
        endFunc
        for

        'flipArr'
        eval
        call
        expand
        'arrlen'
        eval

        findMethod
    endFunc

    // ezMember
    beginFunc
        swp
        copy
        'getClass'
        eval
        jcall
        2
        pull
        swp
        findField
    endFunc

    // ezStaticMember
    beginFunc
        '\.'
        'split'
        eval
        call
        copy
        copy
        int
        dec
        get

        swp

        dec
        copy
        int
        'arrLen'
        define

        ''
        'class'
        define
        beginFunc
            copy
            'i'
            eval
            get
            'class'
            var
            swp
            add
            'class'
            var
            '.'
            add
        endFunc
        beginFunc
            0
            'i'
            define
        endFunc
        beginFunc
            'i'
            eval
            'arrLen'
            eval
            lt
        endFunc
        beginFunc
            'i'
            var
            inc
        endFunc
        for
        pop
        'class'
        eval
        copy
        int
        dec
        0
        swp
        'substring'
        eval
        call
        findClass
        findStaticField
    endFunc

popCtx

// Define functions for export
'ezStaticMember'
define
'ezMember'
define
'ezMethod'
define

// Make functions public
'ezMethod'
var
public
'ezMember'
var
public
'ezStaticMember'
var
public
